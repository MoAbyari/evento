{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Components\n\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.mjs\";\nimport { VExpansionPanelText } from \"./VExpansionPanelText.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\n\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeLazyProps } from \"../../composables/lazy.mjs\"; // Utilities\n\nimport { computed, provide } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'bgColor');\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const isDisabled = computed(() => (groupItem == null ? void 0 : groupItem.disabled.value) || props.disabled);\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index);\n      return arr;\n    }, []));\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === 1);\n    });\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === -1);\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(() => {\n      var _slots$default;\n\n      const hasText = !!(slots.text || props.text);\n      const hasTitle = !!(slots.title || props.title);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value],\n        \"style\": backgroundColorStyles.value,\n        \"aria-expanded\": groupItem.isSelected.value\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": ['v-expansion-panel__shadow', ...elevationClasses.value]\n        }, null), hasTitle && _createVNode(VExpansionPanelTitle, {\n          \"collapseIcon\": props.collapseIcon,\n          \"color\": props.color,\n          \"expandIcon\": props.expandIcon,\n          \"hideActions\": props.hideActions,\n          \"ripple\": props.ripple\n        }, {\n          default: () => [slots.title ? slots.title() : props.title]\n        }), hasText && _createVNode(VExpansionPanelText, {\n          \"eager\": props.eager\n        }, {\n          default: () => [slots.text ? slots.text() : props.text]\n        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVExpansionPanelTitleProps","VExpansionPanelTitle","VExpansionPanelText","VExpansionPanelSymbol","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","useBackgroundColor","makeTagProps","makeLazyProps","computed","provide","defineComponent","useRender","VExpansionPanel","name","props","title","String","text","bgColor","setup","slots","_ref","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","selectedIndices","group","items","reduce","arr","item","index","selected","includes","id","push","isBeforeSelected","findIndex","isSelected","some","selectedIndex","isAfterSelected","hasText","hasTitle","default","collapseIcon","color","expandIcon","hideActions","ripple","eager","_slots$default"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelText } from './VExpansionPanelText'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeLazyProps } from '@/composables/lazy'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          ) }\n\n          { hasText && (\n            <VExpansionPanelText eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          ) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"]},"metadata":{},"sourceType":"module"}