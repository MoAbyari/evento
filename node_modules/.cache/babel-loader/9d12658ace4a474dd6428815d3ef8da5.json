{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { mapState } from \"vuex\";\nimport _ from 'lodash';\nexport default {\n  components: {},\n\n  data() {\n    return {\n      availableStorages: [{\n        name: \"Local\",\n        code: \"local\",\n        icon: \"fas fa-hard-drive\"\n      }, {\n        name: \"Amazon S3\",\n        code: \"S3\",\n        icon: \"fas fa-cloud\"\n      }],\n      actualPathArray: [],\n      actualPath: \"\",\n      isLoading: false,\n      include: \"\",\n      storage: \"local\",\n      activeStorage: \"\",\n      allDriveList: [],\n      selectedNode: {\n        folders: [],\n        files: []\n      },\n      selectedItems: [],\n      unSelectedItems: [],\n      importList: [],\n      showSelectedTable: false,\n      confirmModal: false,\n      settingsItems: [{\n        function: this.empthySelected,\n        id: 1,\n        name: \"Unselect All\",\n        icon: \"\"\n      }]\n    };\n  },\n\n  mounted() {\n    this.activeStorage = this.storage;\n    this.getDrivesList();\n  },\n\n  watch: {\n    actualPath(newValue) {\n      this.getAllFoldersAndFiles(newValue);\n    },\n\n    include() {\n      this.getAllFoldersAndFiles(this.actualPath);\n    }\n\n  },\n  methods: {\n    ////////// utility ///////\n    pathName(path) {\n      let newPath = path.split(\"\\\\\").pop();\n      return this.pathName2(newPath);\n    },\n\n    pathName2(newPath) {\n      return newPath.split(\"/\").pop();\n    },\n\n    ///// file size calculator\n    formatBytes(bytes, decimals = 2) {\n      if (bytes === 0) return \"0 bytes\";\n      const k = 1024;\n      const dm = decimals < 0 ? 0 : decimals;\n      const sizes = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n    },\n\n    empthySelected() {\n      this.selectedItems = [];\n    },\n\n    ////// APIs //////\n    /// get\n    getDrivesList() {\n      if (this.activeStorage === \"local\") {\n        this.isLoading = true;\n        apiIngestImport.fetchDrivesList().then(response => {\n          this.allDriveList = response.data;\n          this.isLoading = false;\n        }).catch(error => {\n          console.error(\"Get All Drive Failed with:\", error);\n        });\n      } else {\n        this.isLoading = true;\n        this.allDriveList = [];\n        this.actualPath = \"\";\n        this.actualPathArray = [];\n        this.selectedNode = {\n          folders: [],\n          files: []\n        };\n        this.isLoading = false;\n      }\n    },\n\n    getAllFoldersAndFiles(item) {\n      let include = this.include ? this.include : \".\";\n      this.isLoading = true;\n      apiIngestImport.fetchAllFolders(item, include, true).then(response => {\n        this.selectedNode.folders = response.data;\n        return apiIngestImport.fetchAllFiles(item, include, true, false);\n      }).then(response => {\n        this.selectedNode.files = response.data;\n        this.isLoading = false;\n      });\n    },\n\n    /// put\n    importSelectedFiles() {\n      apiIngestImport.importAllFiles(this.selectedFiles).then(this.showSelectedTable = false, this.confirmMsg());\n    },\n\n    /////// Methods and events to manipulate data\n    addToActualPath(drive) {\n      this.actualPath = drive.rootDirectory ? drive.rootDirectory : drive.path;\n\n      if (drive.rootDirectory) {\n        this.actualPathArray = [];\n      }\n\n      this.actualPathArray.push({\n        path: drive.rootDirectory ? drive.rootDirectory : drive.path,\n        name: drive.name ? drive.storage.name : this.pathName(drive.path)\n      });\n    },\n\n    ///// Toolbar\n    refresh() {\n      this.include = \"\";\n      this.getAllFoldersAndFiles(this.actualPath);\n    },\n\n    goUp() {\n      this.include = \"\";\n\n      if (this.actualPathArray.length > 1) {\n        this.actualPathArray = this.actualPathArray.slice(0, -1);\n        this.actualPath = this.actualPathArray[this.actualPathArray.length - 1].path;\n      }\n    },\n\n    changeStorage(code) {\n      this.include = \"\";\n      this.activeStorage = code;\n      this.getDrivesList();\n    },\n\n    pathSegChanged(path) {\n      this.include = \"\";\n      let newpathSeg = this.actualPathArray.slice(0, this.actualPathArray.indexOf(path) + 1);\n      this.actualPathArray = newpathSeg;\n      this.actualPath = this.actualPathArray[this.actualPathArray.length - 1].path;\n    },\n\n    addAllFilesAndfoldersToList(folder) {\n      this.selectedItems.push({\n        path: folder.path,\n        size: folder.size\n      });\n      apiIngestImport.fetchAllFolders(folder.path, \".\", false).then(response => {\n        response.data.forEach(folder => {\n          this.selectedItems.push({\n            path: folder.path,\n            size: folder.size\n          });\n        });\n        return apiIngestImport.fetchAllFiles(folder.path, \".\", false, false);\n      }).then(response => {\n        response.data.files.forEach(file => {\n          this.selectedItems.push({\n            path: file.filePath + \"\\\\\" + file.fileName,\n            filePath: file.filePath,\n            fileName: file.fileName,\n            size: file.fileSize\n          });\n        });\n      });\n    },\n\n    removeAllFilesAndFolders(path) {\n      _.forEachRight(this.selectedItems, e => {\n        if (e.path.includes(path)) {\n          this.selectedItems.splice(this.selectedItems.indexOf(e), 1);\n        }\n      });\n    },\n\n    ///// Files\n    addToList(file) {\n      this.selectedItems.push({\n        path: file.filePath + \"\\\\\" + file.fileName,\n        size: file.fileSize,\n        filePath: file.filePath,\n        fileName: file.fileName\n      });\n    },\n\n    removeFromList(file) {\n      _.some(this.selectedItems, e => {\n        if (e.path === file.filePath + \"\\\\\" + file.fileName) {\n          this.selectedItems.splice(this.selectedItems.indexOf(e), 1);\n        }\n      });\n    },\n\n    async removeFromSelectedfile(file) {\n      await this.selectedItems.splice(this.selectedItems.indexOf(file), 1);\n      this.unSelectedItems.push(file);\n    },\n\n    async addToSelectedFiles(file) {\n      await this.selectedItems.push(file);\n      this.unSelectedItems.splice(this.unSelectedItems.indexOf(file), 1);\n    },\n\n    toggleSelectFunc() {\n      if (this.selectedFiles.length < 1) {\n        this.selectedItems = this.unSelectedItems;\n        this.unSelectedItems = [];\n      } else {\n        this.unSelectedItems = this.unSelectedItems.concat(this.selectedFiles);\n        this.selectedItems = [];\n      }\n    },\n\n    /////  Select all and unselect all from selected list\n    toggleSelect() {\n      _.some(this.selectedItems, e => e.path.includes(this.actualPath)) ? this.unselectAll() : this.selectAll();\n    },\n\n    unselectAll() {\n      this.removeAllFilesAndFolders(this.actualPath);\n    },\n\n    selectAll() {\n      if (this.selectedNode.folders.length > 0) {\n        this.selectedNode.folders.forEach(e => {\n          this.addAllFilesAndfoldersToList(e);\n        });\n        this.selectedNode.files.files.forEach(e => {\n          this.selectedItems.push({\n            path: e.filePath + \"\\\\\" + e.fileName,\n            size: e.fileSize,\n            filePath: e.filePath,\n            fileName: e.fileName\n          });\n        });\n      } else {\n        this.selectedNode.files.files.forEach(e => {\n          this.selectedItems.push({\n            path: e.filePath + \"\\\\\" + e.fileName,\n            size: e.fileSize,\n            filePath: e.filePath,\n            fileName: e.fileName\n          });\n        });\n      }\n\n      this.selectedItems.push({\n        path: this.actualPath\n      });\n    },\n\n    confirmMsg() {\n      this.$bvModal.msgBoxOk(\"File(s) imported to Content Library.\", {\n        title: \"Confirmation\",\n        headerClass: \"pb-2\",\n        size: \"sm\",\n        buttonSize: \"sm\",\n        okVariant: \"success\",\n        footerClass: \"pt-2 border-top-0 padding-right-0\",\n        bodyClass: \"pt-2 pb-2\",\n        centered: true\n      }).then(() => {\n        this.selectedItems = [];\n      });\n    }\n\n  },\n  computed: { ...mapState(\"ingestImport\", [\"fileIcons\", \"tableHeads\", \"SelectedTableHeads\"]),\n\n    folderName() {\n      return this.selectedNode.folders.map(folder => {\n        return this.pathName(folder.path);\n      });\n    },\n\n    fileExtension() {\n      return this.selectedNode.files.files.map(file => {\n        return file.fileName.split(\".\").pop();\n      });\n    },\n\n    selectedFiles() {\n      return this.selectedItems.filter(file => {\n        if (file.fileName) {\n          return file;\n        }\n      });\n    },\n\n    selectedFolders() {\n      return this.selectedItems.filter(file => {\n        if (!file.fileName) {\n          return file;\n        }\n      });\n    },\n\n    selectedFilesSize: function () {\n      return this.selectedFiles.reduce((n, {\n        size\n      }) => n + size, 0);\n    },\n    //// changing the path\n    pathSegment: function () {\n      return _.compact(this.actualPath.split(\"\\\\\"));\n    },\n\n    ///// Toolbar\n    storageObject() {\n      if (this.activeStorage) {\n        return this.availableStorages.find(item => item.code === this.activeStorage);\n      }\n\n      return \"\";\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["mapState","_","components","data","availableStorages","name","code","icon","actualPathArray","actualPath","isLoading","include","storage","activeStorage","allDriveList","selectedNode","folders","files","selectedItems","unSelectedItems","importList","showSelectedTable","confirmModal","settingsItems","function","empthySelected","id","mounted","getDrivesList","watch","newValue","getAllFoldersAndFiles","methods","pathName","path","newPath","split","pop","pathName2","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","apiIngestImport","fetchDrivesList","then","response","catch","error","console","item","fetchAllFolders","fetchAllFiles","importSelectedFiles","importAllFiles","selectedFiles","confirmMsg","addToActualPath","drive","rootDirectory","push","refresh","goUp","length","slice","changeStorage","pathSegChanged","newpathSeg","indexOf","addAllFilesAndfoldersToList","folder","size","forEach","file","filePath","fileName","fileSize","removeAllFilesAndFolders","forEachRight","e","includes","splice","addToList","removeFromList","some","removeFromSelectedfile","addToSelectedFiles","toggleSelectFunc","concat","toggleSelect","unselectAll","selectAll","$bvModal","msgBoxOk","title","headerClass","buttonSize","okVariant","footerClass","bodyClass","centered","computed","folderName","map","fileExtension","filter","selectedFolders","selectedFilesSize","reduce","n","pathSegment","compact","storageObject","find"],"sourceRoot":"","sources":["/Users/m67abyari/Projects/Front-Pract/Vue-prac/vuti-vue/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"heading-primary mt-lg\">Import</div>\n    <BaseModal v-show=\"showSelectedTable\" class=\"import\">\n      <div class=\"import__header\">\n        <h1>\n          Import List\n          <span style=\"color: green\"\n            >{{ selectedFiles ? selectedFiles.length : 0 }} files\n          </span>\n          <span style=\"color: green\">{{ formatBytes(selectedFilesSize) }}</span>\n        </h1>\n      </div>\n      <hr />\n      <div class=\"import__tablecontainer\">\n        <table class=\"import-modal__table\">\n          <thead class=\"import-modal__table-head\">\n            <tr>\n              <th class=\"checkboxTD\">\n                <!-- <font-awesome-icon\n                  icon=\"circle\"\n                  class=\"mx-2 iconcheck\"\n                  @click=\"toggleSelectFunc()\"\n                ></font-awesome-icon> -->\n              </th>\n              <th v-for=\"(tableHead, index) in SelectedTableHeads\" :key=\"index\">\n                {{ tableHead.name }}\n              </th>\n            </tr>\n          </thead>\n          <tbody class=\"import-modal__table-body\">\n            <tr v-for=\"(file, index) in importList\" :key=\"index\">\n              <td class=\"checkboxTD\">\n                <font-awesome-icon\n                  v-if=\"selectedFiles.some((e) => e.path === file.path)\"\n                  icon=\"circle\"\n                  class=\"mx-2 iconchecked\"\n                  @click=\"removeFromSelectedfile(file)\"\n                ></font-awesome-icon>\n                <font-awesome-icon\n                  v-else-if=\"unSelectedItems.some((e) => e.path === file.path)\"\n                  icon=\"circle\"\n                  class=\"mx-2 iconcheck\"\n                  @click=\"addToSelectedFiles(file)\"\n                ></font-awesome-icon>\n              </td>\n              <td>\n                <div>\n                  <span>{{ file.fileName }}</span>\n                </div>\n              </td>\n              <td>\n                {{ formatBytes(file.size) }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <hr />\n      <div class=\"import__action\">\n        <div class=\"import__action-import\">\n          <button\n            class=\"export-btn\"\n            :disabled=\"!selectedFiles.length > 0\"\n            variant=\"success\"\n            @click.prevent=\"importSelectedFiles\"\n          >\n            Import\n          </button>\n        </div>\n        <div class=\"import__action-cancel\">\n          <button\n            variant=\"success\"\n            class=\"export-btn\"\n            @click=\"\n              showSelectedTable = false;\n              unSelectedItems = [];\n            \"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </BaseModal>\n    <div class=\"card-res\">\n      <div class=\"card-container\">\n        <div class=\"card-header\">\n          <div class=\"toolbar\">\n            <div class=\"toolbar__content\">\n              <DropDown title=\"\" bgColor=\"green\" icon=\"fa-solid fa-caret-down\">\n                <DropDownItem\n                  v-for=\"(item, index) in availableStorages\"\n                  :key=\"index\"\n                  @click=\"changeStorage(item.code)\"\n                  :disabled=\"item.code === activeStorage\"\n                >\n                  <div>\n                    <i :class=\"item.icon\"> </i>\n                    {{ item.name }}\n                  </div>\n                </DropDownItem>\n              </DropDown>\n              <div class=\"toolbar__content-path\">\n                <div>\n                  <span :class=\"storageObject.icon\"></span>\n                  {{ storageObject.name }}\n                </div>\n              </div>\n              <span class=\"btn btn-up\" @click=\"goUp\">\n                <font-awesome-icon\n                  color=\"white\"\n                  icon=\"arrow-up\"\n                  size=\"1x\"\n                ></font-awesome-icon>\n              </span>\n            </div>\n            <div class=\"toolbar__settings\">\n              <DropDown icon=\"fa-solid fa-gear\" title=\"\" bgColor=\"green\">\n                <DropDownItem\n                  v-for=\"(item, id) in settingsItems\"\n                  :key=\"id\"\n                  @click=\"item.function\"\n                >\n                  <div>{{ item.name }}</div>\n                </DropDownItem>\n              </DropDown>\n            </div>\n            <div class=\"toolbar__search\">\n              <input\n                class=\"toolbar__search-input\"\n                type=\"text\"\n                v-model.lazy=\"include\"\n                :placeholder=\"`Search ${\n                  this.actualPath\n                    ? this.actualPathArray[this.actualPathArray.length - 1].name\n                    : this.storageObject.name\n                }`\"\n              />\n              <span class=\"btn btn-refresh\" @click=\"refresh\">\n                <i class=\"fa-solid fa-rotate-right\"></i>\n              </span>\n            </div>\n          </div>\n          <div class=\"breadcrumb\">\n            <div class=\"breadcrumb__path\">\n              <div\n                v-for=\"(path, index) in actualPathArray\"\n                :key=\"index\"\n                @click=\"pathSegChanged(path)\"\n                style=\"margin: auto 0\"\n              >\n                <div style=\"color: white\">\n                  <span> {{ path.name }} </span>\n                  <i style=\"opacity: 0.7\" class=\"fas fa-chevron-right\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div v-if=\"isLoading\" class=\"spinner\">\n            <!-- <BaseSpinner /> -->\n          </div>\n          <div class=\"body-container\">\n            <div class=\"body-container__left\" v-if=\"allDriveList\">\n              <div\n                v-for=\"drive in allDriveList\"\n                :key=\"drive.name\"\n                class=\"body-container__left-items\"\n                :title=\"drive.rootDirectory\"\n              >\n                <BaseToolTip\n                  placement=\"auto\"\n                  :tooltipTxt=\"drive.rootDirectory\"\n                  bgColor=\"gray\"\n                  show=\"true\"\n                >\n                  <div\n                    style=\"color: white; padding: 0 10px\"\n                    @click=\"addToActualPath(drive)\"\n                  >\n                    <div>\n                      <i class=\"far fa-hdd\"></i>\n                      <span>{{\n                        drive.name ? drive.name : drive.rootDirectory\n                      }}</span>\n                    </div>\n                  </div>\n                </BaseToolTip>\n              </div>\n            </div>\n            <div class=\"body-container__right\">\n              <table>\n                <thead>\n                  <tr>\n                    <th class=\"checkboxTD\">\n                      <font-awesome-icon\n                        icon=\"circle\"\n                        class=\"mx-2 iconcheck\"\n                        @click=\"toggleSelect()\"\n                      ></font-awesome-icon>\n                    </th>\n                    <th\n                      v-for=\"(tableHead, index) in tableHeads\"\n                      :key=\"index\"\n                      :style=\"`width:${tableHead.width}`\"\n                    >\n                      {{ tableHead.name }}\n                    </th>\n                  </tr>\n                </thead>\n                <tbody v-if=\"selectedNode.folders\">\n                  <tr\n                    v-for=\"(folder, index) in selectedNode.folders\"\n                    :key=\"index\"\n                    @dblclick=\"addToActualPath(folder)\"\n                  >\n                    <td class=\"checkboxTD\">\n                      <font-awesome-icon\n                        v-if=\"selectedItems.some((e) => e.path === folder.path)\"\n                        icon=\"circle\"\n                        class=\"mx-2 iconchecked\"\n                        @click=\"removeAllFilesAndFolders(folder.path)\"\n                      ></font-awesome-icon>\n                      <font-awesome-icon\n                        v-else\n                        icon=\"circle\"\n                        class=\"mx-2 iconcheck\"\n                        @click=\"addAllFilesAndfoldersToList(folder)\"\n                      ></font-awesome-icon>\n                    </td>\n                    <td>\n                      <div>\n                        <i class=\"far fa-folder-closed\"></i>\n                        <span>{{ folderName[index] }}</span>\n                      </div>\n                    </td>\n                    <td>{{ formatBytes(folder.size) }}</td>\n                    <td>{{ folder.fileCount }}</td>\n                  </tr>\n                </tbody>\n                <tbody v-if=\"selectedNode.files.files\">\n                  <tr\n                    v-for=\"(file, index) in selectedNode.files.files\"\n                    :key=\"index\"\n                  >\n                    <td class=\"checkboxTD\">\n                      <font-awesome-icon\n                        v-if=\"\n                          selectedItems.some(\n                            (e) =>\n                              e.path === file.filePath + '\\\\' + file.fileName\n                          )\n                        \"\n                        icon=\"circle\"\n                        class=\"mx-2 iconchecked\"\n                        @click=\"removeFromList(file)\"\n                      ></font-awesome-icon>\n                      <font-awesome-icon\n                        v-else\n                        icon=\"circle\"\n                        class=\"mx-2 iconcheck\"\n                        @click=\"addToList(file)\"\n                      ></font-awesome-icon>\n                    </td>\n                    <td>\n                      <div>\n                        <div\n                          :class=\"\n                            fileIcons[fileExtension[index]]\n                              ? fileIcons[fileExtension[index]]\n                              : fileIcons.other\n                          \"\n                        ></div>\n                        <span>{{ file.fileName }}</span>\n                      </div>\n                    </td>\n                    <td>{{ formatBytes(file.fileSize) }}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-footer\">\n          <div class=\"footer\">\n            <div class=\"footer__info\">\n              <div class=\"footer__info-items\">\n                Folders: {{ selectedNode.folders.length }} | Files:\n                {{ selectedNode.files.fileCount }}\n              </div>\n              <div class=\"footer__info-selected\">\n                <div\n                  v-if=\"selectedFolders.length > 0\"\n                  style=\"margin-right: 8px\"\n                >\n                  {{ selectedFolders.length }}\n                  <span style=\"margin: 0 3px\"> Folder(s) Selected</span>\n                </div>\n                <div\n                  v-if=\"selectedFiles.length > 0\"\n                  style=\"border-left: 1px solid grey; padding-left: 8px\"\n                >\n                  {{ selectedFiles.length }}\n                  <span style=\"margin: 0 3px\">File(s) Selected </span>\n                </div>\n              </div>\n              <div class=\"footer__info-size\"></div>\n            </div>\n            <div class=\"footer__import\">\n              <button\n                v-if=\"selectedFiles.length > 0\"\n                variant=\"dark\"\n                class=\"import-btn\"\n                @click=\"\n                  showSelectedTable = true;\n                  importList = selectedFiles;\n                \"\n              >\n                Import List\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState} from \"vuex\";\nimport _ from 'lodash'\n\nexport default {\n  components: {\n\n  },\n  data() {\n    return {\n      availableStorages: [\n        {\n          name: \"Local\",\n          code: \"local\",\n          icon: \"fas fa-hard-drive\",\n        },\n        {\n          name: \"Amazon S3\",\n          code: \"S3\",\n          icon: \"fas fa-cloud\",\n        },\n      ],\n      actualPathArray: [],\n      actualPath: \"\",\n      isLoading: false,\n      include: \"\",\n      storage: \"local\",\n      activeStorage: \"\",\n      allDriveList: [],\n      selectedNode: {\n        folders: [],\n        files: [],\n      },\n      selectedItems: [],\n      unSelectedItems: [],\n      importList: [],\n      showSelectedTable: false,\n      confirmModal: false,\n      settingsItems: [\n        {\n          function: this.empthySelected,\n          id: 1,\n          name: \"Unselect All\",\n          icon: \"\",\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.activeStorage = this.storage;\n    this.getDrivesList();\n  },\n  watch: {\n    actualPath(newValue) {\n      this.getAllFoldersAndFiles(newValue);\n    },\n    include() {\n      this.getAllFoldersAndFiles(this.actualPath);\n    },\n  },\n  methods: {\n    ////////// utility ///////\n    pathName(path) {\n      let newPath = path.split(\"\\\\\").pop();\n      return this.pathName2(newPath);\n    },\n    pathName2(newPath) {\n      return newPath.split(\"/\").pop();\n    },\n    ///// file size calculator\n    formatBytes(bytes, decimals = 2) {\n      if (bytes === 0) return \"0 bytes\";\n\n      const k = 1024;\n      const dm = decimals < 0 ? 0 : decimals;\n      const sizes = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n    },\n    empthySelected() {\n      this.selectedItems = [];\n    },\n    ////// APIs //////\n    /// get\n    getDrivesList() {\n      if (this.activeStorage === \"local\") {\n        this.isLoading = true;\n        apiIngestImport\n          .fetchDrivesList()\n          .then((response) => {\n            this.allDriveList = response.data;\n            this.isLoading = false;\n          })\n          .catch((error) => {\n            console.error(\"Get All Drive Failed with:\", error);\n          });\n      } else {\n        this.isLoading = true;\n        this.allDriveList = [];\n        this.actualPath = \"\";\n        this.actualPathArray = [];\n        this.selectedNode = {\n          folders: [],\n          files: [],\n        };\n        this.isLoading = false;\n      }\n    },\n    getAllFoldersAndFiles(item) {\n      let include = this.include ? this.include : \".\";\n      this.isLoading = true;\n      apiIngestImport\n        .fetchAllFolders(item, include, true)\n        .then((response) => {\n          this.selectedNode.folders = response.data;\n          return apiIngestImport.fetchAllFiles(item, include, true, false);\n        })\n        .then((response) => {\n          this.selectedNode.files = response.data;\n          this.isLoading = false;\n        });\n    },\n    /// put\n    importSelectedFiles() {\n      apiIngestImport\n        .importAllFiles(this.selectedFiles)\n        .then((this.showSelectedTable = false), this.confirmMsg());\n    },\n    /////// Methods and events to manipulate data\n    addToActualPath(drive) {\n      this.actualPath = drive.rootDirectory ? drive.rootDirectory : drive.path;\n      if (drive.rootDirectory) {\n        this.actualPathArray = [];\n      }\n      this.actualPathArray.push({\n        path: drive.rootDirectory ? drive.rootDirectory : drive.path,\n        name: drive.name ? drive.storage.name : this.pathName(drive.path),\n      });\n    },\n    ///// Toolbar\n    refresh() {\n      this.include = \"\";\n      this.getAllFoldersAndFiles(this.actualPath);\n    },\n    goUp() {\n      this.include = \"\";\n      if (this.actualPathArray.length > 1) {\n        this.actualPathArray = this.actualPathArray.slice(0, -1);\n        this.actualPath =\n          this.actualPathArray[this.actualPathArray.length - 1].path;\n      }\n    },\n    changeStorage(code) {\n      this.include = \"\";\n      this.activeStorage = code;\n      this.getDrivesList();\n    },\n    pathSegChanged(path) {\n      this.include = \"\";\n      let newpathSeg = this.actualPathArray.slice(\n        0,\n        this.actualPathArray.indexOf(path) + 1\n      );\n      this.actualPathArray = newpathSeg;\n      this.actualPath =\n        this.actualPathArray[this.actualPathArray.length - 1].path;\n    },\n    addAllFilesAndfoldersToList(folder) {\n      this.selectedItems.push({\n        path: folder.path,\n        size: folder.size,\n      });\n      apiIngestImport\n        .fetchAllFolders(folder.path, \".\", false)\n        .then((response) => {\n          response.data.forEach((folder) => {\n            this.selectedItems.push({\n              path: folder.path,\n              size: folder.size,\n            });\n          });\n          return apiIngestImport.fetchAllFiles(folder.path, \".\", false, false);\n        })\n        .then((response) => {\n          response.data.files.forEach((file) => {\n            this.selectedItems.push({\n              path: file.filePath + \"\\\\\" + file.fileName,\n              filePath: file.filePath,\n              fileName: file.fileName,\n              size: file.fileSize,\n            });\n          });\n        });\n    },\n    removeAllFilesAndFolders(path) {\n      _.forEachRight(this.selectedItems, (e) => {\n        if (e.path.includes(path)) {\n          this.selectedItems.splice(this.selectedItems.indexOf(e), 1);\n        }\n      });\n    },\n    ///// Files\n    addToList(file) {\n      this.selectedItems.push({\n        path: file.filePath + \"\\\\\" + file.fileName,\n        size: file.fileSize,\n        filePath: file.filePath,\n        fileName: file.fileName,\n      });\n    },\n    removeFromList(file) {\n      _.some(this.selectedItems, (e) => {\n        if (e.path === file.filePath + \"\\\\\" + file.fileName) {\n          this.selectedItems.splice(this.selectedItems.indexOf(e), 1);\n        }\n      });\n    },\n    async removeFromSelectedfile(file) {\n      await this.selectedItems.splice(this.selectedItems.indexOf(file), 1);\n      this.unSelectedItems.push(file);\n    },\n    async addToSelectedFiles(file) {\n      await this.selectedItems.push(file);\n      this.unSelectedItems.splice(this.unSelectedItems.indexOf(file), 1);\n    },\n    toggleSelectFunc() {\n      if (this.selectedFiles.length < 1) {\n        this.selectedItems = this.unSelectedItems;\n        this.unSelectedItems = [];\n      } else {\n        this.unSelectedItems = this.unSelectedItems.concat(this.selectedFiles);\n        this.selectedItems = [];\n      }\n    },\n    /////  Select all and unselect all from selected list\n    toggleSelect() {\n      _.some(this.selectedItems, (e) => e.path.includes(this.actualPath))\n        ? this.unselectAll()\n        : this.selectAll();\n    },\n    unselectAll() {\n      this.removeAllFilesAndFolders(this.actualPath);\n    },\n    selectAll() {\n      if (this.selectedNode.folders.length > 0) {\n        this.selectedNode.folders.forEach((e) => {\n          this.addAllFilesAndfoldersToList(e);\n        });\n        this.selectedNode.files.files.forEach((e) => {\n          this.selectedItems.push({\n            path: e.filePath + \"\\\\\" + e.fileName,\n            size: e.fileSize,\n            filePath: e.filePath,\n            fileName: e.fileName,\n          });\n        });\n      } else {\n        this.selectedNode.files.files.forEach((e) => {\n          this.selectedItems.push({\n            path: e.filePath + \"\\\\\" + e.fileName,\n            size: e.fileSize,\n            filePath: e.filePath,\n            fileName: e.fileName,\n          });\n        });\n      }\n      this.selectedItems.push({\n        path: this.actualPath,\n      });\n    },\n    confirmMsg() {\n      this.$bvModal\n        .msgBoxOk(\"File(s) imported to Content Library.\", {\n          title: \"Confirmation\",\n          headerClass: \"pb-2\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"success\",\n          footerClass: \"pt-2 border-top-0 padding-right-0\",\n          bodyClass: \"pt-2 pb-2\",\n          centered: true,\n        })\n        .then(() => {\n          this.selectedItems = [];\n        });\n    },\n  },\n  computed: {\n    ...mapState(\"ingestImport\", [\n      \"fileIcons\",\n      \"tableHeads\",\n      \"SelectedTableHeads\",\n    ]),\n    folderName() {\n      return this.selectedNode.folders.map((folder) => {\n        return this.pathName(folder.path);\n      });\n    },\n    fileExtension() {\n      return this.selectedNode.files.files.map((file) => {\n        return file.fileName.split(\".\").pop();\n      });\n    },\n    selectedFiles() {\n      return this.selectedItems.filter((file) => {\n        if (file.fileName) {\n          return file;\n        }\n      });\n    },\n    selectedFolders() {\n      return this.selectedItems.filter((file) => {\n        if (!file.fileName) {\n          return file;\n        }\n      });\n    },\n    selectedFilesSize: function () {\n      return this.selectedFiles.reduce((n, { size }) => n + size, 0);\n    },\n    //// changing the path\n    pathSegment: function () {\n      return _.compact(this.actualPath.split(\"\\\\\"));\n    },\n\n    ///// Toolbar\n    storageObject() {\n      if (this.activeStorage) {\n        return this.availableStorages.find(\n          (item) => item.code === this.activeStorage\n        );\n      }\n      return \"\";\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"@/assets/scss/custom.scss\";\n\n.card-res {\n  height: 90vh;\n  overflow: hidden;\n  padding: 1rem 1rem 1rem 0;\n}\n.card-container {\n  background-color: black;\n  height: 100%;\n}\n//////////////   Toolbar\n//// Bootstrap CSS\n.card-header {\n  border: $bGray;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0 !important;\n  height: 20%;\n}\n.card-body {\n  border: 1px solid gray;\n  height: 70%;\n}\n.card-footer {\n  border: $bGray;\n  height: 10%;\n}\n\n///// Toolbar\n.toolbar {\n  @include flex(row, \"false\");\n  align-items: baseline;\n  border-bottom: 1px solid gray;\n  padding: 0.5rem 1.25rem !important;\n  &__content {\n    @include flex(row, \"false\");\n    align-items: baseline;\n    margin-right: 8px;\n    border-radius: 5px;\n    // &-items {\n    //   display: flex;\n    //   align-items: center;\n    //   border: 1px solid gray;\n    //   padding: 5px;\n    //   border-radius: 5px;\n    // }\n    &-path {\n      background-color: $green;\n      padding: 7px 15px;\n      border-radius: 5px;\n    }\n    &-path span {\n      margin: 0;\n    }\n  }\n  &__settings {\n    flex: 3;\n  }\n  &__search {\n    text-align: right;\n    flex: 2;\n    &-input {\n      width: 80%;\n      padding-left: 8px;\n      background-color: black;\n      color: white;\n      border: $bGray;\n      border-radius: 5px;\n      outline: none;\n      height: 40px;\n      &:focus-within {\n        border: $bGreen;\n      }\n    }\n  }\n  &__search span {\n    margin: 0 0 0 0.5rem;\n  }\n}\n.breadcrumb {\n  padding: 0.5rem 1.25rem !important;\n  margin: 0;\n  height: 4rem;\n  background-color: inherit;\n  flex-wrap: wrap;\n  &:hover {\n    cursor: pointer;\n  }\n  &__path {\n    @include flex(row, \"false\");\n    @include bGray(1px);\n    border-radius: 5px;\n    padding: 0 0.5rem;\n    // border-right: 1px solid grey;\n    // padding-right: 8px;\n    width: 100%;\n  }\n}\n.body-container {\n  @include flex(row, \"false\");\n  height: 100%;\n  &__left {\n    @include flex(column, \"false\");\n    flex: 1;\n    padding: 43px 16px 0 0;\n    border-right: $bGray;\n    &-items {\n      text-align: left;\n      margin-top: 0.5rem;\n      color: gray;\n      vertical-align: baseline;\n      border: $bGray;\n      border-radius: 0.5rem;\n      padding: 0.2rem;\n      color: #fff;\n      // height: 2rem;\n      &:hover {\n        cursor: pointer;\n        border: $bGreen;\n        border-radius: 0.5rem;\n      }\n    }\n  }\n  &__right {\n    flex: 4;\n    flex-direction: row;\n    justify-content: space-around;\n    flex-wrap: wrap;\n    overflow-y: scroll;\n    padding-right: 5px;\n  }\n}\n///////// table\n@include table();\ntr {\n  height: 45px;\n  border-bottom: bBlack(4px);\n  &:hover {\n    cursor: pointer;\n  }\n}\n.checkboxTD {\n  text-align: center;\n  padding: 0;\n}\n.fa-check-circle {\n  color: $green;\n}\n.iconcheck,\n.fa-circle {\n  color: $light-gray;\n  border-radius: 50%;\n  @include bGray(2px);\n  font-size: 13px;\n}\n.iconchecked {\n  color: $green;\n  border-radius: 50%;\n  @include bGray(2px);\n}\nspan {\n  margin: 0 10px;\n}\n.file-item {\n  margin: 0 0.25rem 0.25rem 0;\n  padding: 1.25rem 0 1rem 0;\n  width: 9rem;\n  text-align: center;\n  border: $bGray;\n  // height: 25%;\n}\n.file-item-icon {\n  display: block;\n  margin: 0 auto 0.75rem auto;\n  width: 4rem;\n  // height: 4rem;\n  font-size: 2.5rem;\n  line-height: 4rem;\n}\n.file-item-checkbox {\n  @include flex(row, start);\n  padding-left: 1rem;\n}\n.file-item-name {\n  display: block;\n  overflow: hidden;\n}\n////// Footer /////\n.footer {\n  @include flex(row, \"false\");\n  align-items: baseline;\n  &__info {\n    // height: 40px;\n    padding: 12px;\n    color: white;\n    @include flex(row, \"false\");\n    flex: 1;\n    align-items: center;\n    row-gap: 20px;\n    border: $bGray;\n    margin-right: 8px;\n    border-radius: 5px;\n    &-items {\n      flex: 0.9;\n      text-align: start;\n      align-items: start;\n      color: #ffffffc9;\n    }\n    &-selected {\n      @include flex(row, start);\n      flex: 3;\n      color: #ffffffc9;\n    }\n  }\n}\n.import {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-43%, -50%);\n  background-color: $light-gray;\n  width: 70vw;\n  max-height: 70vh;\n  z-index: 500;\n  background: black;\n  border: $bGreen;\n  &__header {\n    text-align: left;\n    color: white;\n  }\n  &__tablecontainer {\n    overflow-y: scroll;\n    max-height: 49vh;\n    padding-right: 0.5rem;\n  }\n  &__action {\n    @include flex(row, end);\n    margin-top: 25px;\n    &-import,\n    &-cancel {\n      margin-left: 16px;\n    }\n  }\n}\nhr {\n  border: $bGreen;\n  margin-top: 10px;\n}\n\n// .spinner {\n//   background-color: rgb(0, 0, 0);\n//   position: absolute;\n//   z-index: 1000;\n//   height: 80%;\n//   width: 98%;\n// }\n.img1 {\n  height: 10em !important;\n  width: 10em !important;\n  animation: spin 1.2s linear infinite !important;\n  top: 41% !important;\n  right: 42% !important;\n  border-radius: 50% !important;\n  position: fixed !important;\n  backdrop-filter: blur(10px) !important;\n}\n@keyframes spin {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n// .spinner {\n//   position: absolute;\n//   top: 15%;\n//   width: 98%;\n//   height: 76%;\n//   z-index: 20000;\n//   background-color: #000000b3;\n// }\n\n.btn {\n  background-color: $green;\n  color: white;\n}\n////// webkit /////\n@include scrollBar;\n</style>\n"]},"metadata":{},"sourceType":"module"}