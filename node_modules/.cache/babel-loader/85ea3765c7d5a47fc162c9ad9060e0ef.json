{"ast":null,"code":"// Composables\nimport { makeVariantProps } from \"../../composables/variant.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { defineComponent } from \"../../util/index.mjs\";\nimport { toRef } from 'vue';\nexport const VToolbarItems = defineComponent({\n  name: 'VToolbarItems',\n  props: { ...makeVariantProps({\n      variant: 'contained-text'\n    })\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    provideDefaults({\n      VBtn: {\n        color: toRef(props, 'color'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    return () => {\n      var _slots$default;\n\n      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);\n    };\n  }\n\n});","map":{"version":3,"mappings":"AAAA;SACSA,wB;SACAC,uB,kCAET;;SACSC,uB;AACT,SAASC,KAAT,QAAsB,KAAtB;AAEA,OAAO,MAAMC,aAAa,GAAGF,eAAe,CAAC;EAC3CG,IAAI,EAAE,eADqC;EAG3CC,KAAK,EAAE,EACL,GAAGN,gBAAgB,CAAC;MAAEO,OAAO,EAAE;IAAX,CAAD;EADd,CAHoC;;EAO3CC,KAAK,CAAEF,KAAF,QAAoB;IAAA,IAAX;MAAEG;IAAF,IAAWC;IACvBT,eAAe,CAAC;MACdU,IAAI,EAAE;QACJC,KAAK,EAAET,KAAK,CAACG,KAAD,EAAQ,OAAR,CADR;QAEJC,OAAO,EAAEJ,KAAK,CAACG,KAAD,EAAQ,SAAR;MAFV;IADQ,CAAD,CAAfL;IAOA,OAAO;MAAA;;MAAA,yBAAMQ,KAAK,CAACI,OAAZ,qBAAMC,0BAAN;IAAP;EACD;;AAhB0C,CAAD,CAArC","names":["makeVariantProps","provideDefaults","defineComponent","toRef","VToolbarItems","name","props","variant","setup","slots","_ref","VBtn","color","default","_slots$default"],"sources":["../../../src/components/VToolbar/VToolbarItems.tsx"],"sourcesContent":["// Composables\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { defineComponent } from '@/util'\nimport { toRef } from 'vue'\n\nexport const VToolbarItems = defineComponent({\n  name: 'VToolbarItems',\n\n  props: {\n    ...makeVariantProps({ variant: 'contained-text' }),\n  },\n\n  setup (props, { slots }) {\n    provideDefaults({\n      VBtn: {\n        color: toRef(props, 'color'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    return () => slots.default?.()\n  },\n})\n\nexport type VToolbarItems = InstanceType<typeof VToolbarItems>\n"]},"metadata":{},"sourceType":"module"}