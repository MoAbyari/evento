{"ast":null,"code":"import { propsFactory } from \"../util/index.mjs\";\nimport { computed, unref } from 'vue';\nimport { parseAnchor } from \"../components/VOverlay/util/anchor.mjs\";\nimport { useRtl } from \"./rtl.mjs\";\nconst oppositeMap = {\n  center: 'center',\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n};\nexport const makeLocationProps = propsFactory({\n  location: String\n}, 'location');\nexport function useLocation(props) {\n  let opposite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const {\n    isRtl\n  } = useRtl();\n\n  function toPhysical(side) {\n    return side === 'start' ? isRtl.value ? 'right' : 'left' : side === 'end' ? isRtl.value ? 'left' : 'right' : side;\n  }\n\n  const locationStyles = computed(() => {\n    if (!props.location) return {};\n    const anchor = parseAnchor(props.location.split(' ').length > 1 ? props.location : `${props.location} center`);\n    const side = toPhysical(anchor.side);\n    const align = toPhysical(anchor.align);\n    const styles = {};\n\n    if (side !== 'center') {\n      if (opposite) styles[oppositeMap[side]] = `calc(100% - ${unref(offset)}px)`;else styles[side] = 0;\n    }\n\n    if (align !== 'center') {\n      if (opposite) styles[oppositeMap[align]] = `calc(100% - ${unref(offset)}px)`;else styles[align] = 0;\n    } else {\n      if (side === 'center') styles.top = styles.left = '50%';else {\n        styles[{\n          top: 'left',\n          bottom: 'left',\n          left: 'top',\n          right: 'top'\n        }[side]] = '50%';\n      }\n      styles.transform = {\n        top: 'translateX(-50%)',\n        bottom: 'translateX(-50%)',\n        left: 'translateY(-50%)',\n        right: 'translateY(-50%)',\n        center: 'translate(-50%, -50%)'\n      }[side];\n    }\n\n    return styles;\n  });\n  return {\n    locationStyles\n  };\n}","map":{"version":3,"mappings":"SACSA,oB;AACT,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SAGSC,mB;SACAC,c;AAET,MAAMC,WAAW,GAAG;EAClBC,MAAM,EAAE,QADU;EAElBC,GAAG,EAAE,QAFa;EAGlBC,MAAM,EAAE,KAHU;EAIlBC,IAAI,EAAE,OAJY;EAKlBC,KAAK,EAAE;AALW,CAApB;AAYA,OAAO,MAAMC,iBAAiB,GAAGX,YAAY,CAAC;EAC5CY,QAAQ,EAAEC;AADkC,CAAD,EAE1C,UAF0C,CAAtC;AAIP,OAAO,SAASC,WAAT,CAAsBC,KAAtB,EAA4F;EAAA,IAAhDC,QAAgD,uEAArC,KAAqC;EAAA,IAA9BC,MAA8B,uEAAH,CAAG;EACjG,MAAM;IAAEC;EAAF,IAAYd,MAAM,EAAxB;;EAEA,SAASe,UAAT,CAAqBC,IAArB,EAAmC;IACjC,OACEA,IAAI,KAAK,OAATA,GAAoBF,KAAK,CAACG,KAANH,GAAc,OAAdA,GAAwB,MAA5CE,GACEA,IAAI,KAAK,KAATA,GAAkBF,KAAK,CAACG,KAANH,GAAc,MAAdA,GAAuB,OAAzCE,GACAA,IAHJ;EAKD;;EAED,MAAME,cAAc,GAAGrB,QAAQ,CAAC,MAAM;IACpC,IAAI,CAACc,KAAK,CAACH,QAAX,EAAqB,OAAO,EAAP;IAErB,MAAMW,MAAM,GAAGpB,WAAW,CACxBY,KAAK,CAACH,QAANG,CAAeS,KAAfT,CAAqB,GAArBA,EAA0BU,MAA1BV,GAAmC,CAAnCA,GACIA,KAAK,CAACH,QADVG,GAEK,GAAEA,KAAK,CAACH,QAAS,SAHE,CAA1B;IAMA,MAAMQ,IAAI,GAAGD,UAAU,CAACI,MAAM,CAACH,IAAR,CAAvB;IACA,MAAMM,KAAK,GAAGP,UAAU,CAACI,MAAM,CAACG,KAAR,CAAxB;IAEA,MAAMC,MAAM,GAAG,EAAf;;IAEA,IAAIP,IAAI,KAAK,QAAb,EAAuB;MACrB,IAAIJ,QAAJ,EAAcW,MAAM,CAACtB,WAAW,CAACe,IAAD,CAAZ,CAANO,GAA6B,eAAczB,KAAK,CAACe,MAAD,CAAS,KAAzDU,CAAd,KACKA,MAAM,CAACP,IAAD,CAANO,GAAe,CAAfA;IACN;;IACD,IAAID,KAAK,KAAK,QAAd,EAAwB;MACtB,IAAIV,QAAJ,EAAcW,MAAM,CAACtB,WAAW,CAACqB,KAAD,CAAZ,CAANC,GAA8B,eAAczB,KAAK,CAACe,MAAD,CAAS,KAA1DU,CAAd,KACKA,MAAM,CAACD,KAAD,CAANC,GAAgB,CAAhBA;IAFP,OAGO;MACL,IAAIP,IAAI,KAAK,QAAb,EAAuBO,MAAM,CAACpB,GAAPoB,GAAaA,MAAM,CAAClB,IAAPkB,GAAc,KAA3BA,CAAvB,KACK;QACHA,MAAM,CAAE;UACNpB,GAAG,EAAE,MADC;UAENC,MAAM,EAAE,MAFF;UAGNC,IAAI,EAAE,KAHA;UAINC,KAAK,EAAE;QAJD,EAKIU,IALJ,CAAF,CAANO,GAKqB,KALrBA;MAMD;MACDA,MAAM,CAACC,SAAPD,GAAmB;QACjBpB,GAAG,EAAE,kBADY;QAEjBC,MAAM,EAAE,kBAFS;QAGjBC,IAAI,EAAE,kBAHW;QAIjBC,KAAK,EAAE,kBAJU;QAKjBJ,MAAM,EAAE;MALS,EAMjBc,IANiB,CAAnBO;IAOD;;IAED,OAAOA,MAAP;EAxC6B,EAA/B;EA2CA,OAAO;IAAEL;EAAF,CAAP;AACD","names":["propsFactory","computed","unref","parseAnchor","useRtl","oppositeMap","center","top","bottom","left","right","makeLocationProps","location","String","useLocation","props","opposite","offset","isRtl","toPhysical","side","value","locationStyles","anchor","split","length","align","styles","transform"],"sources":["../../src/composables/location.ts"],"sourcesContent":["import type { MaybeRef } from '@/util'\nimport { propsFactory } from '@/util'\nimport { computed, unref } from 'vue'\nimport type { CSSProperties, PropType } from 'vue'\nimport type { Anchor } from '@/components/VOverlay/util/anchor'\nimport { parseAnchor } from '@/components/VOverlay/util/anchor'\nimport { useRtl } from '@/composables/rtl'\n\nconst oppositeMap = {\n  center: 'center',\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left',\n} as const\n\nexport interface LocationProps {\n  location: Anchor | undefined\n}\n\nexport const makeLocationProps = propsFactory({\n  location: String as PropType<Anchor>,\n}, 'location')\n\nexport function useLocation (props: LocationProps, opposite = false, offset: MaybeRef<number> = 0) {\n  const { isRtl } = useRtl()\n\n  function toPhysical (side: string) {\n    return (\n      side === 'start' ? (isRtl.value ? 'right' : 'left')\n      : side === 'end' ? (isRtl.value ? 'left' : 'right')\n      : side\n    ) as 'right' | 'left' | 'top' | 'bottom' | 'center'\n  }\n\n  const locationStyles = computed(() => {\n    if (!props.location) return {}\n\n    const anchor = parseAnchor(\n      props.location.split(' ').length > 1\n        ? props.location\n        : `${props.location} center` as Anchor\n    )\n\n    const side = toPhysical(anchor.side)\n    const align = toPhysical(anchor.align)\n\n    const styles = {} as CSSProperties\n\n    if (side !== 'center') {\n      if (opposite) styles[oppositeMap[side]] = `calc(100% - ${unref(offset)}px)`\n      else styles[side] = 0\n    }\n    if (align !== 'center') {\n      if (opposite) styles[oppositeMap[align]] = `calc(100% - ${unref(offset)}px)`\n      else styles[align] = 0\n    } else {\n      if (side === 'center') styles.top = styles.left = '50%'\n      else {\n        styles[({\n          top: 'left',\n          bottom: 'left',\n          left: 'top',\n          right: 'top',\n        } as const)[side]] = '50%'\n      }\n      styles.transform = {\n        top: 'translateX(-50%)',\n        bottom: 'translateX(-50%)',\n        left: 'translateY(-50%)',\n        right: 'translateY(-50%)',\n        center: 'translate(-50%, -50%)',\n      }[side]\n    }\n\n    return styles\n  })\n\n  return { locationStyles }\n}\n"]},"metadata":{},"sourceType":"module"}