{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, vShow as _vShow, Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VOverlay.css\"; // Composables\n\nimport { makeActivatorProps, useActivator } from \"./useActivator.mjs\";\nimport { makeLocationStrategyProps, useLocationStrategies } from \"./locationStrategies.mjs\";\nimport { makeScrollStrategyProps, useScrollStrategies } from \"./scrollStrategies.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useBackButton, useRouter } from \"../../composables/router.mjs\";\nimport { useToggleScope } from \"../../composables/toggleScope.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useRtl } from \"../../composables/rtl.mjs\";\nimport { useTeleport } from \"../../composables/teleport.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\";\nimport { useStack } from \"../../composables/stack.mjs\"; // Directives\n\nimport { ClickOutside } from \"../../directives/click-outside/index.mjs\"; // Utilities\n\nimport { convertToUnit, genericComponent, getScrollParent, IN_BROWSER, standardEasing, useRender } from \"../../util/index.mjs\";\nimport { computed, mergeProps, ref, Teleport, toHandlers, toRef, Transition, watch } from 'vue'; // Types\n\nfunction Scrim(props) {\n  const {\n    modelValue,\n    color,\n    ...rest\n  } = props;\n  return _createVNode(Transition, {\n    \"name\": \"fade-transition\",\n    \"appear\": true\n  }, {\n    default: () => [props.modelValue && _createVNode(\"div\", _mergeProps({\n      \"class\": ['v-overlay__scrim', props.color.backgroundColorClasses.value],\n      \"style\": props.color.backgroundColorStyles.value\n    }, rest), null)]\n  });\n}\n\nexport const VOverlay = genericComponent()({\n  name: 'VOverlay',\n  directives: {\n    ClickOutside\n  },\n  inheritAttrs: false,\n  props: {\n    absolute: Boolean,\n    attach: [Boolean, String, Object],\n    closeOnBack: {\n      type: Boolean,\n      default: true\n    },\n    contained: Boolean,\n    contentClass: null,\n    contentProps: null,\n    noClickAnimation: Boolean,\n    modelValue: Boolean,\n    persistent: Boolean,\n    scrim: {\n      type: [String, Boolean],\n      default: true\n    },\n    zIndex: {\n      type: [Number, String],\n      default: 2000\n    },\n    ...makeActivatorProps(),\n    ...makeDimensionProps(),\n    ...makeLocationStrategyProps(),\n    ...makeScrollStrategyProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps(),\n    ...makeLazyProps()\n  },\n  emits: {\n    'click:outside': e => true,\n    'update:modelValue': value => true,\n    afterLeave: () => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      attrs,\n      emit\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      teleportTarget\n    } = useTeleport(computed(() => props.attach || props.contained));\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      rtlClasses\n    } = useRtl();\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, isActive);\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null;\n    }));\n    const {\n      isTop,\n      stackStyles\n    } = useStack(isActive, toRef(props, 'zIndex'));\n    const {\n      activatorEl,\n      activatorRef,\n      activatorEvents,\n      contentEvents\n    } = useActivator(props, {\n      isActive,\n      isTop\n    });\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const root = ref();\n    const contentEl = ref();\n    const {\n      contentStyles,\n      updateLocation\n    } = useLocationStrategies(props, {\n      contentEl,\n      activatorEl,\n      isActive\n    });\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updateLocation\n    });\n\n    function onClickOutside(e) {\n      emit('click:outside', e);\n      if (!props.persistent) isActive.value = false;else animateClick();\n    }\n\n    function closeConditional() {\n      return isActive.value && isTop.value;\n    }\n\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown);\n      } else {\n        window.removeEventListener('keydown', onKeydown);\n      }\n    }, {\n      immediate: true\n    });\n\n    function onKeydown(e) {\n      if (e.key === 'Escape' && isTop.value) {\n        if (!props.persistent) {\n          isActive.value = false;\n        } else animateClick();\n      }\n    }\n\n    const router = useRouter();\n    useToggleScope(() => props.closeOnBack, () => {\n      useBackButton(router, next => {\n        if (isTop.value && isActive.value) {\n          next(false);\n          if (!props.persistent) isActive.value = false;else animateClick();\n        } else {\n          next();\n        }\n      });\n    });\n    const top = ref();\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value);\n\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop;\n        }\n      }\n    }); // Add a quick \"bounce\" animation to the content\n\n    function animateClick() {\n      var _contentEl$value;\n\n      if (props.noClickAnimation) return;\n      (_contentEl$value = contentEl.value) == null ? void 0 : _contentEl$value.animate([{\n        transformOrigin: 'center'\n      }, {\n        transform: 'scale(1.03)'\n      }, {\n        transformOrigin: 'center'\n      }], {\n        duration: 150,\n        easing: standardEasing\n      });\n    }\n\n    useRender(() => {\n      var _slots$activator, _slots$default;\n\n      return _createVNode(_Fragment, null, [(_slots$activator = slots.activator) == null ? void 0 : _slots$activator.call(slots, {\n        isActive: isActive.value,\n        props: mergeProps({\n          ref: activatorRef\n        }, toHandlers(activatorEvents.value), props.activatorProps)\n      }), IN_BROWSER && _createVNode(Teleport, {\n        \"disabled\": !teleportTarget.value,\n        \"to\": teleportTarget.value\n      }, {\n        default: () => [hasContent.value && _createVNode(\"div\", _mergeProps({\n          \"class\": ['v-overlay', {\n            'v-overlay--absolute': props.absolute || props.contained,\n            'v-overlay--active': isActive.value,\n            'v-overlay--contained': props.contained\n          }, themeClasses.value, rtlClasses.value],\n          \"style\": [stackStyles.value, {\n            top: convertToUnit(top.value)\n          }],\n          \"ref\": root\n        }, attrs), [_createVNode(Scrim, {\n          \"color\": scrimColor,\n          \"modelValue\": isActive.value && !!props.scrim\n        }, null), _createVNode(MaybeTransition, {\n          \"appear\": true,\n          \"persisted\": true,\n          \"transition\": props.transition,\n          \"target\": activatorEl.value,\n          \"onAfterLeave\": () => {\n            onAfterLeave();\n            emit('afterLeave');\n          }\n        }, {\n          default: () => [_withDirectives(_createVNode(\"div\", _mergeProps({\n            \"ref\": contentEl,\n            \"class\": ['v-overlay__content', props.contentClass],\n            \"style\": [dimensionStyles.value, contentStyles.value]\n          }, toHandlers(contentEvents.value), props.contentProps), [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {\n            isActive\n          })]), [[_vShow, isActive.value], [_resolveDirective(\"click-outside\"), {\n            handler: onClickOutside,\n            closeConditional,\n            include: () => [activatorEl.value]\n          }]])]\n        })])]\n      })]);\n    });\n    return {\n      animateClick,\n      contentEl,\n      activatorEl,\n      isTop,\n      updateLocation\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeActivatorProps","useActivator","makeLocationStrategyProps","useLocationStrategies","makeScrollStrategyProps","useScrollStrategies","makeThemeProps","provideTheme","makeTransitionProps","MaybeTransition","useBackButton","useRouter","useToggleScope","useBackgroundColor","useProxiedModel","useRtl","useTeleport","makeDimensionProps","useDimension","makeLazyProps","useLazy","useStack","ClickOutside","convertToUnit","genericComponent","getScrollParent","IN_BROWSER","standardEasing","useRender","computed","mergeProps","ref","Teleport","toHandlers","toRef","Transition","watch","Scrim","props","modelValue","color","rest","default","backgroundColorClasses","value","backgroundColorStyles","VOverlay","name","directives","inheritAttrs","absolute","Boolean","attach","String","Object","closeOnBack","type","contained","contentClass","contentProps","noClickAnimation","persistent","scrim","zIndex","Number","emits","e","afterLeave","setup","slots","attrs","emit","_ref","isActive","teleportTarget","themeClasses","rtlClasses","hasContent","onAfterLeave","scrimColor","isTop","stackStyles","activatorEl","activatorRef","activatorEvents","contentEvents","dimensionStyles","root","contentEl","contentStyles","updateLocation","onClickOutside","animateClick","closeConditional","val","window","addEventListener","onKeydown","removeEventListener","immediate","key","router","next","top","scrollParent","document","scrollingElement","scrollTop","animate","transformOrigin","transform","duration","easing","activator","_slots$activator","activatorProps","transition","_slots$default","handler","include"],"sources":["../../../src/components/VOverlay/VOverlay.tsx"],"sourcesContent":["// Styles\nimport './VOverlay.sass'\n\n// Composables\nimport { makeActivatorProps, useActivator } from './useActivator'\nimport { makeLocationStrategyProps, useLocationStrategies } from './locationStrategies'\nimport { makeScrollStrategyProps, useScrollStrategies } from './scrollStrategies'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useBackButton, useRouter } from '@/composables/router'\nimport { useToggleScope } from '@/composables/toggleScope'\nimport { useBackgroundColor } from '@/composables/color'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useRtl } from '@/composables/rtl'\nimport { useTeleport } from '@/composables/teleport'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\nimport { useStack } from '@/composables/stack'\n\n// Directives\nimport { ClickOutside } from '@/directives/click-outside'\n\n// Utilities\nimport {\n  convertToUnit,\n  genericComponent,\n  getScrollParent,\n  IN_BROWSER,\n  standardEasing,\n  useRender,\n} from '@/util'\nimport {\n  computed,\n  mergeProps,\n  ref,\n  Teleport,\n  toHandlers,\n  toRef,\n  Transition,\n  watch,\n} from 'vue'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { BackgroundColorData } from '@/composables/color'\n\ninterface ScrimProps {\n  [key: string]: unknown\n  modelValue: boolean\n  color: BackgroundColorData\n}\nfunction Scrim (props: ScrimProps) {\n  const { modelValue, color, ...rest } = props\n  return (\n    <Transition name=\"fade-transition\" appear>\n      { props.modelValue && (\n        <div\n          class={[\n            'v-overlay__scrim',\n            props.color.backgroundColorClasses.value,\n          ]}\n          style={ props.color.backgroundColorStyles.value }\n          { ...rest }\n        />\n      )}\n    </Transition>\n  )\n}\n\nexport type OverlaySlots = MakeSlots<{\n  default: [{ isActive: Ref<boolean> }]\n  activator: [{ isActive: boolean, props: Record<string, any> }]\n}>\n\nexport const VOverlay = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VOverlay',\n\n  directives: { ClickOutside },\n\n  inheritAttrs: false,\n\n  props: {\n    absolute: Boolean,\n    attach: [Boolean, String, Object] as PropType<boolean | string | Element>,\n    closeOnBack: {\n      type: Boolean,\n      default: true,\n    },\n    contained: Boolean,\n    contentClass: null,\n    contentProps: null,\n    noClickAnimation: Boolean,\n    modelValue: Boolean,\n    persistent: Boolean,\n    scrim: {\n      type: [String, Boolean],\n      default: true,\n    },\n    zIndex: {\n      type: [Number, String],\n      default: 2000,\n    },\n\n    ...makeActivatorProps(),\n    ...makeDimensionProps(),\n    ...makeLocationStrategyProps(),\n    ...makeScrollStrategyProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps(),\n    ...makeLazyProps(),\n  },\n\n  emits: {\n    'click:outside': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n    afterLeave: () => true,\n  },\n\n  setup (props, { slots, attrs, emit }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { teleportTarget } = useTeleport(computed(() => props.attach || props.contained))\n    const { themeClasses } = provideTheme(props)\n    const { rtlClasses } = useRtl()\n    const { hasContent, onAfterLeave } = useLazy(props, isActive)\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null\n    }))\n    const { isTop, stackStyles } = useStack(isActive, toRef(props, 'zIndex'))\n    const { activatorEl, activatorRef, activatorEvents, contentEvents } = useActivator(props, { isActive, isTop })\n    const { dimensionStyles } = useDimension(props)\n\n    const root = ref<HTMLElement>()\n    const contentEl = ref<HTMLElement>()\n    const { contentStyles, updateLocation } = useLocationStrategies(props, {\n      contentEl,\n      activatorEl,\n      isActive,\n    })\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updateLocation,\n    })\n\n    function onClickOutside (e: MouseEvent) {\n      emit('click:outside', e)\n\n      if (!props.persistent) isActive.value = false\n      else animateClick()\n    }\n\n    function closeConditional () {\n      return isActive.value && isTop.value\n    }\n\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown)\n      } else {\n        window.removeEventListener('keydown', onKeydown)\n      }\n    }, { immediate: true })\n\n    function onKeydown (e: KeyboardEvent) {\n      if (e.key === 'Escape' && isTop.value) {\n        if (!props.persistent) {\n          isActive.value = false\n        } else animateClick()\n      }\n    }\n\n    const router = useRouter()\n    useToggleScope(() => props.closeOnBack, () => {\n      useBackButton(router, next => {\n        if (isTop.value && isActive.value) {\n          next(false)\n          if (!props.persistent) isActive.value = false\n          else animateClick()\n        } else {\n          next()\n        }\n      })\n    })\n\n    const top = ref<number>()\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value)\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop\n        }\n      }\n    })\n\n    // Add a quick \"bounce\" animation to the content\n    function animateClick () {\n      if (props.noClickAnimation) return\n\n      contentEl.value?.animate([\n        { transformOrigin: 'center' },\n        { transform: 'scale(1.03)' },\n        { transformOrigin: 'center' },\n      ], {\n        duration: 150,\n        easing: standardEasing,\n      })\n    }\n\n    useRender(() => (\n      <>\n        { slots.activator?.({\n          isActive: isActive.value,\n          props: mergeProps({\n            ref: activatorRef,\n          }, toHandlers(activatorEvents.value), props.activatorProps),\n        }) }\n\n        { IN_BROWSER && (\n          <Teleport\n            disabled={ !teleportTarget.value }\n            to={ teleportTarget.value }\n          >\n            { hasContent.value && (\n              <div\n                class={[\n                  'v-overlay',\n                  {\n                    'v-overlay--absolute': props.absolute || props.contained,\n                    'v-overlay--active': isActive.value,\n                    'v-overlay--contained': props.contained,\n                  },\n                  themeClasses.value,\n                  rtlClasses.value,\n                ]}\n                style={[stackStyles.value, { top: convertToUnit(top.value) }]}\n                ref={ root }\n                {...attrs}\n              >\n                <Scrim\n                  color={ scrimColor }\n                  modelValue={ isActive.value && !!props.scrim }\n                />\n                <MaybeTransition\n                  appear\n                  persisted\n                  transition={ props.transition }\n                  target={ activatorEl.value }\n                  onAfterLeave={() => { onAfterLeave(); emit('afterLeave') }}\n                >\n                  <div\n                    ref={ contentEl }\n                    v-show={ isActive.value }\n                    v-click-outside={{ handler: onClickOutside, closeConditional, include: () => [activatorEl.value] }}\n                    class={[\n                      'v-overlay__content',\n                      props.contentClass,\n                    ]}\n                    style={[\n                      dimensionStyles.value,\n                      contentStyles.value,\n                    ]}\n                    { ...toHandlers(contentEvents.value) }\n                    { ...props.contentProps }\n                  >\n                    { slots.default?.({ isActive }) }\n                  </div>\n                </MaybeTransition>\n              </div>\n            )}\n          </Teleport>\n        ) }\n      </>\n    ))\n\n    return {\n      animateClick,\n      contentEl,\n      activatorEl,\n      isTop,\n      updateLocation,\n    }\n  },\n})\n\nexport type VOverlay = InstanceType<typeof VOverlay>\n"]},"metadata":{},"sourceType":"module"}